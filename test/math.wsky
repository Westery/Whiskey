/* Local Variables:                     */
/* mode: javascript                     */
/* tab-width: 4                         */
/* indent-tabs-mode: nil                */
/* eval: (electric-indent-mode -1)      */
/* End:                                 */

import math;

var testing;

var equal;
var nearEqual;

var PI = math.PI;

var testToDegreeToRadians = {
    var toDegrees = math.toDegrees;
    var toRadians = math.toRadians;

    testing.raises(ParameterError, "Expected a number", {
        toDegrees('123');
    });

    nearEqual(0.0, toDegrees(0));
    nearEqual(0.0, toDegrees(0.0));
    nearEqual(0.0, toRadians(0));
    nearEqual(0.0, toRadians(0.0));
    nearEqual(0.0, toRadians(toDegrees(0)));
    nearEqual(123.0, toRadians(toDegrees(123)));
    nearEqual(123.0, toDegrees(toRadians(123)));
    nearEqual(123.0, toDegrees(toRadians(123.0)));
};

var testMax = {
    var max = math.max;

    testing.raises(ParameterError, "Expected at least one parameter", {
        max();
    });

    testing.raises(TypeError,
                   "Unsupported classes for '>': String and String", {
        max('123', '456');
    });

    equal('hello', max('hello'));
    equal(1, max(1));
    equal(2, max(1, 2));
    equal(2, max(2, 1));
    equal(4, max(1, 2, 3, 4));
    equal(4, max(4, 3, 2, 1));

    nearEqual(4.0, max(1, 2, 3, 4.0, 3.2));
    equal(4, max(1.0, 2.0, 3.0, 4, 3.5));

    // TODO: Test error when a non-numeric argument is given,
    // or when no parameter is given.
};

var testMin = {
    var min = math.min;

    equal(1, min(1));
    equal(-7, min(1, -7));
    equal(-7, min(-7, 1));
    equal(-7, min(-7, 1.0));
};

var testCos = {
    var cos = math.cos;

    nearEqual(1.0, cos(0));
    nearEqual(1.0, cos(0.0));
    nearEqual(-1.0, cos(PI));

    nearEqual(0.0, cos(PI / 2));

    nearEqual(0.0, cos(-PI / 2));
};

var testSin = {
    var sin = math.sin;

    nearEqual(0.0, sin(0));
    nearEqual(0.0, sin(PI));
    nearEqual(1.0, sin(PI / 2));
    nearEqual(-1.0, sin(-PI / 2));
};

var testTan = {
    var tan = math.tan;

    nearEqual(0.0, tan(0));
    nearEqual(0.0, tan(PI));
    testing.assert(tan(PI / 2) > 999999.0);
    testing.assert(tan(-PI / 2) < -999999.0);
};

var testSign = {
    var sign = math.sign;

    equal(1, sign(PI));
    equal(1, sign(1));
    equal(1, sign(1.0));
    equal(1, sign(0.00001));
    equal(0, sign(0));
    equal(0, sign(0.0));
    equal(-1, sign(-1));
    equal(-1, sign(-1.0));
    equal(-1, sign(-PI));

    testing.raises(ValueError, "The parameter can't be NaN", {
        sign(math._getNaN());
    });
};


var testAbs = {
    var abs = math.abs;

    nearEqual(3.14, abs(3.14));
    nearEqual(3.14, abs(-3.14));
    equal(123, abs(-123));
    equal(123, abs(123));
    equal(0, abs(0));
    nearEqual(0.0, abs(0.0));
};


export runTests = {testing_:
    testing = testing_;
    equal = testing.equal;
    nearEqual = testing.nearEqual;

    equal('<Module math>', math.toString);

    testing.assert(math.PI > 3.141 and math.PI < 3.142);
    testing.assert(math.E > 2.718 and math.E < 2.719);

    testToDegreeToRadians();
    testMax();
    testMin();

    testCos();
    testSin();
    testTan();

    testSign();
    testAbs();
};
