/* Local Variables:                     */
/* mode: javascript                     */
/* tab-width: 4                         */
/* indent-tabs-mode: nil                */
/* eval: (electric-indent-mode -1)      */
/* End:                                 */

var assertTrue = {value:
    assertImpl(value);
};

var assertFalse = {value:
    assertImpl(not value);
};

var equal = {expected, value:
    var errorMessage = expected + ' expected, got ' + value + ' instead\n';

    assertImpl(expected == value);
    if expected != value:
        printImpl(errorMessage)
};

var fail = {expectedExceptionClass, expectedMessage, function:

    // TODO: Remove this variable when the 'else' clause will
    // be added to the 'try' statement
    var failed = false;

    try: (
        function()
    ) except Exception as e: (
        equal(expectedExceptionClass.toString, e.class.toString);
        failed = true;
    );

    if not failed:
        equal(expectedExceptionClass.toString, '')
};


var testing = Structure();
testing.assertTrue = assertTrue;
testing.assertFalse = assertFalse;
testing.equal = equal;
testing.fail = fail;


var testZeroDivision = {
    fail(ZeroDivisionError, 'Division by zero', {3 / 0});
    fail(ZeroDivisionError, 'Division by zero', {0 / 0});
};

var testFib = {
    var fib = {n:
        if n == 0 or n == 1:
            n
        else:
            fib(n - 1) + fib(n - 2)
    };
    equal(0, fib(0));
    equal(1, fib(1));
    equal(1, fib(2));
    equal(2, fib(3));
    equal(3, fib(4));
    equal(5, fib(5));
    equal(8, fib(6));
};


var testFact = {
    var fact = {n:
        if n == 0:
            1
        else:
            n * fact(n - 1)
    };

    equal(1, fact(0));
    equal(1, fact(1));
    equal(2, fact(2));
    equal(6, fact(3));
    equal(24, fact(4));
};


var testStructure = {
    var s = Structure();
    s.a = 'hello';

    equal('hello', s.a);
};


var testModule = {
    import .dummy_module;

    equal('a', dummy_module.a);
    equal('b', dummy_module.b);
    equal('<Class C>', dummy_module.C.toString);
};


testZeroDivision();
testFib();
testFact();
testStructure();
testModule();

import .classes;
classes.runTests(testing);

import .tostring;
tostring.runTests(testing);
